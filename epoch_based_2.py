import matplotlib.pyplot as pltdef draw_loss_plot(epoch, g_gan, g_l1, d_real, d_fake, percep_a, name=''):    plt.subplot(2, 1, 1)    plt.plot(epoch, g_gan, 'r-')    plt.plot(epoch, g_l1, 'b-')    plt.legend(['G_GAN', 'G_L1', 'D_real'])    plt.xlabel('Epoch')    plt.ylabel('Loss')    plt.subplot(2, 1, 2)    plt.plot(epoch, d_real, 'c-')    plt.plot(epoch, d_fake, 'm-')    plt.plot(epoch, percep_a, 'y-')    plt.legend(['D_real', 'D_fake', 'percep_A'])    plt.xlabel('Epoch')    plt.savefig('epoch_based_plot_' + name + '.png')def parse_train_log(file_path):    hist = {'epoch': [0], 'G_GAN': [0.0], 'G_L1': [0.0], 'D_real' : [0.0], 'D_fake': [0.0], 'percep_A' : [0.0], 'cnt': [0]}    keys = hist.keys()    with open(file_path, 'r') as f:        for line in f:            if 'Training' in line:                hist = {'epoch': [0], 'G_GAN': [0.0], 'G_L1': [0.0], 'D_real' : [0.0], 'D_fake': [0.0], 'G_B': [0.0], 'percep_A' : [0.0], 'cnt': [0]}                continue            units = line.translate({ord('('): '', ord(')'): '', ord(':'): '', ord(','): ''})            units = units.split(' ')[:-1]            loss_dict = {}            for i in range(0, len(units), 2):                loss_dict[units[i]] = float(units[i + 1])            epoch_cnt = int(units[1])            if epoch_cnt not in hist['epoch']:                hist['epoch'].append(epoch_cnt)                for key in keys:                    if key in ('epoch', 'cnt'): continue                    hist[key].append(loss_dict[key])                hist['cnt'].append(1)            else:                hist['cnt'][epoch_cnt] += 1                for key in keys:                    if key in ('epoch', 'cnt'): continue                    hist[key][epoch_cnt] = (hist[key][epoch_cnt] * (hist['cnt'][epoch_cnt] - 1) + loss_dict[key]) / hist['cnt'][epoch_cnt]    for key in keys:        hist[key] = hist[key][1:]    return histhist = parse_train_log('/home/soohyeonlee/project/pytorch-CycleGAN-and-pix2pix(perceptual_loss)/checkpoints/halfface_percep_3/loss_log.txt')draw_loss_plot(epoch=hist['epoch'], g_gan=hist['G_GAN'], g_l1=hist['G_L1'],               d_real=hist['D_real'], d_fake=hist['D_fake'], percep_a=hist['percep_A'], name='halfface_with_perceptual_loss')# hist = {'epoch': [0], 'G_GAN': [0.0], 'G_L1': [0.0], 'D_real' : [0.0], 'D_fake': [0.0], 'percep_A' : [0.0]}